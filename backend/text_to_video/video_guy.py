# takes a youtube shorts sciprt and thinks of 3 videos that should be generated by the video model 
import os
from groq import Groq

from generate_script import remove_think_tags
from groq import Groq
import instructor
from pydantic import BaseModel
from typing import List
from ttv import text_to_video

class Videos(BaseModel):
    videos: List[str]
    
def generate_video_prompts(script: str, num_videos: int = 3):
    client = Groq()
    client = instructor.from_groq(client)

    system_prompt = f"""you are an expert at handling video generation models you will be given a youtube shorts script for a news piece and you need to generate videos. it must be a visual description of what the user should see keep them simple. also try to keep them simple and not overly specific  .  something like : video of a tesla car driving with an american flag in the background is good. the video model you have access to only gives out a FIXED 6 second video for each of your prompts. the editor will tell you how many videos we need for the shorts based on that you will think of engaging prompts for the video model to generate videos . keep the prompts simple our video model is quite small"""
    
    try:
        completion = client.chat.completions.create(
            model="deepseek-r1-distill-llama-70b",
            messages=[
                {
                    "role": "system",
                    "content": system_prompt
                },
                {
                    "role": "user",
                    "content": f"Here is the script: {script} and we need 2 videos. think of engaging prompts it must be visual in nature for the vision model to generate videos!"
                }
            ],
            stop=None,
            response_model=Videos
        )
        
        print(completion)
            
        return completion
        
    except Exception as e:
        print(f"Error generating videos: {e}")
        return None
    
def generate_videos(prompts: List[str], project_name: str = "output"):
    video_files = []
    
    # Create videos directory in backend/assets
    backend_dir = os.path.dirname(os.path.dirname(__file__))
    videos_dir = os.path.join(backend_dir,  "videos", project_name)
    os.makedirs(videos_dir, exist_ok=True)
    
    for prompt in prompts:
        video_path = os.path.join(videos_dir, f"{prompt}.mp4")
        success = text_to_video(prompt, video_path)
        if success:
            video_files.append(video_path)
    return video_files
    
def create_video_content(script: str, num_videos: int = 3, project_name: str = "output"):
    result = generate_video_prompts(script, num_videos=num_videos)
    if result is None:
        print(f"Error: Failed to generate video prompts")
        return None
    generate_videos(result.videos, project_name=project_name)  
    return project_name
    
    
if __name__ == "__main__":
    script = "Tesla shares rose by 14.8% on Wednesday as investors speculated about possible policy changes."
    
    # Generate video prompts
    result = generate_video_prompts(script, num_videos=3)
    
    # Generate videos
    generate_videos(result.videos)
    
    # Print the results
    if result:
        print("\nGenerated video prompts:")
        for i, video in enumerate(result.videos, 1):
            print(f"{i}. {video}")

    
    
    