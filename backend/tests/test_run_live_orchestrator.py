import unittest
import os
import sys
import logging

# Add project root to sys.path to allow direct imports of backend modules
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if PROJECT_ROOT not in sys.path:
    sys.path.insert(0, PROJECT_ROOT)

from backend.video_pipeline.asset_orchestrator import orchestrate_video_assets

# Configure basic logging for the test run
logging.basicConfig(level=os.getenv("LOG_LEVEL", "INFO").upper(), format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TestRunLiveOrchestrator(unittest.TestCase):
    """
    This test suite runs the full asset orchestration pipeline live.
    It makes actual API calls and will interact with external services.
    """

    def test_execute_live_asset_orchestration(self):
        """
        Runs the asset_orchestrator.py script.

        Prerequisites:
        1.  A .env file at the project root must be populated with the necessary API keys:
            - FREESOUND_API_KEY
            - ARGIL_API_KEY
            - S3_BUCKET_NAME
            - AWS_ACCESS_KEY_ID (or configured AWS CLI/environment)
            - AWS_SECRET_ACCESS_KEY (or configured AWS CLI/environment)
            - AWS_DEFAULT_REGION
            - PEXELS_API_KEY
        2.  The following input files must exist (typically generated by a prior E2E test run):
            - test_outputs/e2e_llm_scene_plan_output.json
            - test_outputs/How_Tencent_Bought_Its_Way_Into_AI_s_Top_8_master_vo.mp3 (or the specific master voiceover file expected by the orchestrator)
            - public/script.md
        3.  ffmpeg must be installed and available in the system's PATH for audio slicing.
        4.  Ensure the `test_outputs` directory exists at the project root.

        This test will not mock any external calls. It will attempt to:
        - Download background music from Freesound.
        - For AVATAR scenes:
            - Slice audio.
            - Upload audio to S3.
            - Create and render Argil video jobs.
        - For STOCK_VIDEO/STOCK_IMAGE scenes:
            - Download assets from Pexels.
        - Save an orchestration_summary_output.json in test_outputs/.
        """
        logger.info("Starting live asset orchestration test.")
        logger.warning("This test will make REAL API calls to Freesound, Pexels, AWS S3, and Argil.")
        logger.warning("Ensure all API keys are correctly set in your .env file and prerequisites are met.")

        # Check for prerequisite files to give a more direct warning if they're missing.
        project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
        scene_plan_file = os.path.join(project_root, "test_outputs", "e2e_llm_scene_plan_output.json")
        master_vo_file = os.path.join(project_root, "test_outputs", "How_Tencent_Bought_Its_Way_Into_AI_s_Top_8_master_vo.mp3")
        script_file = os.path.join(project_root, "public", "script.md")

        if not os.path.exists(scene_plan_file):
            logger.error(f"Prerequisite file missing: {scene_plan_file}")
            self.fail(f"Prerequisite file missing: {scene_plan_file}")
        if not os.path.exists(master_vo_file):
            logger.error(f"Prerequisite file missing: {master_vo_file}")
            self.fail(f"Prerequisite file missing: {master_vo_file}")
        if not os.path.exists(script_file):
            logger.error(f"Prerequisite file missing: {script_file}")
            self.fail(f"Prerequisite file missing: {script_file}")

        try:
            orchestrate_video_assets()
            logger.info("Live asset orchestration test completed successfully (script execution finished).")
            logger.info("Check the 'test_outputs/' directory for generated assets and 'orchestration_summary_output.json'.")
            logger.info("Also, check your S3 bucket and Argil dashboard for created assets/jobs.")
        except Exception as e:
            logger.error(f"Live asset orchestration test failed with an exception: {e}", exc_info=True)
            self.fail(f"Live asset orchestration failed: {e}")

if __name__ == '__main__':
    # This allows running the test directly, e.g., python backend/tests/test_run_live_orchestrator.py
    # It's often better to run tests using the unittest discover mechanism:
    # python -m unittest discover backend/tests
    # or specifically:
    # python -m unittest backend.tests.test_run_live_orchestrator
    logger.info("Running live orchestrator test directly.")
    unittest.main()
